makeCacheMatrix <- function(x = matrix()) {
        
        # inverse_matrix = NUll means empty vector
        # just a place holder for something called inverse_matrix
        
        inverse_matrix <- NULL
        
        # set <- function(y) {
        #        x <<- y
        #        inverse_matrix <<- NULL
        # }
        
        # set is nothing more than to set the default values of
        # an object from the outer world
        # in this case you want x to start with 
        # a value y from outside the object
        # function (y)  x <<-y will do that
        # i.e function (whatever) x <<- whatever 
        # does the same
        # in addition you make sure that your placeholder for
        # inverse_matrix is empty by the statement
        # inverse_matrix <- NULL
        # After creating an object i.e. "first"
        # > first$set(1:10) sets x <- 1:10
        
        
        set <- function(y) {
                x <<- y
                inverse_matrix <<- NULL
        }
        
        # get <- function() x
        # to return the value x from inside the object to the outer        
        # world you just use function () x which means just 
        # give me x. After creating an object i.e. "first"
        # > first$get() gives x
        
        get <- function() x
        
        # setInverse <- function(inverse) inverse_matrix <<- inverse
        # setInverse sets the default values of
        # an object from the outer world
        # in this case you want inverse_matrix to start with 
        # a value inverse from outside the object
        # function (inverse)  inverse_matrix <<- inverse 
        # will do that
        # i.e function (whatever) inverse_matrix <<- whatever
        # will do the same
        # After creating an object i.e. "first"
        # > first$setInverse(matrix_to_be _inversed) sets
        # inverse_matrix <<- matrix_to_be_inversed
        
        setInverse <- function(inverse) inverse_matrix <<- inverse
        
        # getInverse <- function() inverse_matrix
        # After creating an object i.e. "first"
        # > first$getInverse() gives as output
        # inverse_matrix 
        
        getInverse <- function() inverse_matrix
        
        # list(set = set, get = get,
        # setInverse = setInverse,
        # getInverse = getInverse)
        
        # all variables in the list can be examined just by the   
        # $ approach i.e. 
        # first$set(fill_in_something) ## do not keep empty ( ) 
        # first$get() ## keep () empty
        # first$setInverse(fill_in_something)
        # first$getInverse() ## keep () empty
        
        list(set = set, get = get,
             setInverse = setInverse,
             getInverse = getInverse)
}		  



cacheSolve <- function(x, ...) {
        
        # inverse_matrix <- x$getInverse()
        # x is an object created by the function makeCacheMatrix()
        # x$getInvers() asks for the function result of
        # function() inverse_matrix (see above)
        # so the first time of using makeCache(Matrix()
        # we know that inverse_matrix <<- NULL
        
        inverse_matrix <- x$getInverse()
        
        
        # if(!is.null(inverse_matrix)) {
        #      message("getting cached data")
        #  return(inverse_matrix) }

        # so if inverse_matrix <<- NULL 
        # we skip the if statement below
        # since is.null(inverse_matrix) == TRUE
        # and (!is.null(inverse_matrix)) == FALSE
        # but the next time we use our same object
        # inverse_matrix != NULL and the condition of 
        # the if statement = TRUE
        # we then get the message "getting cached data"
        # inverse_matrix is returned
        
        if(!is.null(inverse_matrix)) {
                message("getting cached data")
                return(inverse_matrix)
        }
        
        
        # data <- x$get()
        # inverse_matrix <<- NULL 
        # we skip the if statement below
        # remember makeCacheMatrix  get function
        # get <- function() x
        # where x was set to the matrix we want to inverse
        
        data <- x$get()
        
        # inverse_matrix <- solve(data, ...)
        # solve function is a function that
        # does the work of inverting a matrix
        
        inverse_matrix <- solve(data, ...)
        
        # x$setInverse(inverse_matrix)
        # makeCacheMatrix   
        # setInverse <- function(inverse) inverse_matrix <<- inverse
        
        x$setInverse(inverse_matrix)
        
        # finally we get our invered matrix to the outer world
        inverse_matrix
}


# example code to test makeCacheMatrix() and cacheSolve()
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1
a <- makeCacheMatrix(m1)
cacheSolve(a)
cacheSolve(a)
a$get()
a$getInverse()
n1 <- matrix(c(1,2,3,4), nrow = 2, ncol = 2)
n1
b <- makeCacheMatrix(n1)
cacheSolve(b)
cacheSolve(b)
b$get()
b$getInverse()

b$set(m1)
b$setInverse(m1)
cacheSolve(b)

